/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package compiler;

import compiler.CodeGenerator.CodeGenerator;
import compiler.CodeGenerator.CodeGenerator.GeneratedClass;
import compiler.Exceptions.CodeGeneratorException.CodeGeneratorException;
import compiler.Exceptions.LexerException;
import compiler.Exceptions.SemanticException.SemanticException;
import compiler.Lexer.Lexer;
import compiler.Parser.Parser;

import java.io.*;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Scanner;

public class Compiler {
    public static void main(String[] args)
            throws LexerException, ParseException, SemanticException, CodeGeneratorException {
        String inputFile = null;
        String outputFile = null;
        boolean run = false;

        for (int i = 0; i < args.length; i++) {
            if (args[i].equals("-o")) {
                outputFile = args[++i];
            } else if (args[i].equals("-r")) {
                run = true;
            } else {
                inputFile = args[i];
            }
        }

        if (inputFile == null) {
            System.err.println("Input file not specified");
            System.exit(1);
        }

        Scanner scanner;
        try {
            scanner = new Scanner(new File(inputFile));
        } catch (FileNotFoundException e) {
            throw new RuntimeException("Error while opening input file.");
        }

        StringBuilder content = new StringBuilder();
        while (scanner.hasNextLine()) {
            content.append(scanner.nextLine()).append("\n");
        }
        scanner.close();

        // --- compile ---

        StringReader reader = new StringReader(content.toString());
        Lexer lexer = new Lexer(reader);
        Parser parser = new Parser(lexer);

        CodeGenerator cg = new CodeGenerator(parser, true);
        Class<?> clazz = cg.generateProgram();

        // --- write to file ---

        if (outputFile != null) {
            ArrayList<GeneratedClass> gen = cg.generateBytecode();

            gen.forEach((cls) -> {
                try {
                    FileOutputStream fos = new FileOutputStream(cls.name + ".class");
                    fos.write(cls.bytecode);
                    fos.close();
                } catch (IOException e) {
                    throw new RuntimeException("Error while writing to output file(s).");
                }
            });
        }

        // --- run ---

        if (run) {
            try {
                Method method = clazz.getMethod("main");
                method.invoke(null);
            } catch (NoSuchMethodException e) {
                throw new RuntimeException("Missing main method.");
            } catch (InvocationTargetException e) {
                throw new RuntimeException("Can't access the main method.");
            } catch (IllegalAccessException e) {
                throw new RuntimeException("Wrong main method signature.");
            }
        }
    }
}
